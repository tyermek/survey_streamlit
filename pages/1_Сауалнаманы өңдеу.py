import time
import streamlit as st
import json
import os

# Set page configuration
st.set_page_config(page_title="–°–∞—É–∞–ª–Ω–∞–º–∞–Ω—ã ”©“£–¥–µ—É", page_icon="üìä")
st.sidebar.header("–°–∞—É–∞–ª–Ω–∞–º–∞–Ω—ã ”©“£–¥–µ—É")
st.markdown("# –°–∞—É–∞–ª–Ω–∞–º–∞–Ω—ã ”©“£–¥–µ—É")

# Check if the user is logged in
if not st.session_state.get("password_correct", False):
    st.error("–ê–ª–¥—ã–º–µ–Ω –∂“Ø–π–µ–≥–µ –∫—ñ—Ä—É –∫–µ—Ä–µ–∫!")
    st.stop()

# File paths
QUESTIONS_FILE = "../questions.json"


# Load questions
def load_questions(file_path):
    if os.path.exists(file_path):
        with open(file_path, "r", encoding="utf-8") as f:
            return json.load(f)
    return []


# Save questions
def save_questions(questions, file_path):
    with open(file_path, "w", encoding="utf-8") as f:
        json.dump(questions, f, ensure_ascii=False, indent=4)


# Load existing questions
questions_with_options = load_questions(QUESTIONS_FILE)


# Function to add a new question
def add_question():
    new_question = {
        "question": st.session_state['question_text'],
        "options": st.session_state['answer_options'],
        "type": "RADIO" if st.session_state['question_type'] == "–ë—ñ—Ä –∂–∞—É–∞–±—ã –±–∞—Ä" else "CHECKBOX"
    }
    questions_with_options.append(new_question)
    save_questions(questions_with_options, QUESTIONS_FILE)
    st.success("–°“±—Ä–∞“õ “õ–æ—Å—ã–ª–¥—ã!")
    time.sleep(2)
    reset_form()


def reset_form():
    st.session_state.clear()
    st.experimental_rerun()


# Initialize session state for answer options and question text
if 'answer_options' not in st.session_state:
    st.session_state['answer_options'] = []

if 'question_text' not in st.session_state:
    st.session_state['question_text'] = ""

if 'new_option' not in st.session_state:
    st.session_state['new_option'] = ""

if 'question_type' not in st.session_state:
    st.session_state['question_type'] = "–ë—ñ—Ä –∂–∞—É–∞–±—ã –±–∞—Ä"

if 'show_questions' not in st.session_state:
    st.session_state['show_questions'] = False


# Function to add an option
def add_option():
    if st.session_state['new_option']:
        st.session_state['answer_options'].append(st.session_state['new_option'])
        st.session_state['new_option'] = ""  # Clear the input after adding


# Function to show all questions
def show_all_questions():
    st.session_state['show_questions'] = True
    st.experimental_rerun()


# Streamlit form for adding questions
if not st.session_state['show_questions']:
    st.subheader("–ñ–∞“£–∞ —Å“±—Ä–∞“õ “õ–æ—Å—É")
    st.selectbox("–°“±—Ä–∞“õ —Ç“Ø—Ä—ñ–Ω —Ç–∞“£–¥–∞“£—ã–∑", options=["–ë—ñ—Ä –∂–∞—É–∞–±—ã –±–∞—Ä", "–ë—ñ—Ä –Ω–µ–º–µ—Å–µ –±—ñ—Ä–Ω–µ—à–µ –¥“±—Ä—ã—Å –∂–∞—É–∞–±—ã –±–∞—Ä"],
                 key='question_type')
    st.text_input("–°“±—Ä–∞“õ—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑", key='question_text')

    # Section to add options one by one
    st.text_input("–ñ–∞—É–∞–ø –Ω“±—Å“õ–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑", key='new_option')
    st.button("–ñ–∞—É–∞–ø –Ω“±—Å“õ–∞—Å—ã–Ω “õ–æ—Å—É", on_click=add_option)

    # Display the current question and added options
    if st.session_state['question_text']:
        st.write("“ö–æ—Å—ã–ª“ì–∞–Ω —Å“±—Ä–∞“õ:")
        st.write(st.session_state['question_text'])

    if st.session_state['answer_options']:
        st.write("“ö–æ—Å—ã–ª“ì–∞–Ω –∂–∞—É–∞–ø –Ω“±—Å“õ–∞–ª–∞—Ä—ã:")
        for idx, option in enumerate(st.session_state['answer_options']):
            st.write(f"{idx + 1}. {option}")

    # Use narrower columns to place buttons closer
    add_question_html = st.button("–°“±—Ä–∞“õ—Ç—ã –¥–µ—Ä–µ–∫“õ–æ—Ä“ì–∞ “õ–æ—Å—É", key="add_question_html")
    show_questions_html = st.button("–î–µ—Ä–µ–∫“õ–æ—Ä–¥—ã –∫”©—Ä—Å–µ—Ç—É", key="show_questions_html")

    if add_question_html:
        if not st.session_state['question_text']:
            st.error("–°“±—Ä–∞“õ—Ç—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑")
        elif len(st.session_state['answer_options']) < 2:
            st.error("–ö–µ–º –¥–µ–≥–µ–Ω–¥–µ –µ–∫—ñ –∂–∞—É–∞–ø –Ω“±—Å“õ–∞—Å—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑")
        else:
            add_question()

    if show_questions_html:
        show_all_questions()

# Display all questions
else:
    st.subheader("–ë–∞—Ä–ª—ã“õ —Å“±—Ä–∞“õ—Ç–∞—Ä")
    for q in questions_with_options:
        st.write(f"–°“±—Ä–∞“õ: {q['question']}")
        for idx, option in enumerate(q['options']):
            st.write(f"{idx + 1}. {option}")
        st.write(f"–¢“Ø—Ä—ñ: {'–ë—ñ—Ä –∂–∞—É–∞–±—ã –±–∞—Ä' if q['type'] == 'RADIO' else '–ë—ñ—Ä –Ω–µ–º–µ—Å–µ –±—ñ—Ä–Ω–µ—à–µ –¥“±—Ä—ã—Å –∂–∞—É–∞–±—ã –±–∞—Ä'}")
        st.write("---")

    # Button to go back to the form
    if st.button("–ñ–∞“£–∞ —Å“±—Ä–∞“õ “õ–æ—Å—É"):
        st.session_state['show_questions'] = False
        st.experimental_rerun()
